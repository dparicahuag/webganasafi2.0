# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dev
- main

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  # dockerRegistryServiceConnection: '4eed55fa-4832-4c4f-848a-d833668621d8'
  dockerRegistryServiceConnection: 'ganasafi-registry'
  imageRepository: 'ganasafiportaweb'
  containerRegistry: 'ganasafi.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/DockerFile'
  tag: '$(Build.BuildId).$(Build.SourceBranchName)'
  webRepository: 'ganasafiportaweb'
  RegistryName: ganasafi
  imagePullSecret: ganasafi-sec
  k8sNamespace: ganasafi
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      displayName: Build and push an image to container registry DEV
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)-dev
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: 'manifests'

- stage: 'Deploy'
  displayName: 'Deploy the container'
  dependsOn: Build
  jobs:
  - job: 'Deploy'
    displayName: 'Deploy job'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifactName: 'manifests'
        downloadPath: '$(System.ArtifactsDirectory)/manifests'

    - task: KubernetesManifest@0
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      displayName: Create imagePullSecret
      inputs:
        action: createSecret
        secretName: $(imagePullSecret)
        kubernetesServiceConnection: 'ganasafi-prod'
        namespace: $(k8sNamespace)
        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

    - task: KubernetesManifest@0
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      displayName: Create imagePullSecret
      inputs:
        action: createSecret
        secretName: $(imagePullSecret)
        kubernetesServiceConnection: 'ganasafi-prod'
        namespace: $(k8sNamespace)-dev
        dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

    - task: KubernetesManifest@0
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
      displayName: 'Deploy to Kubernetes cluster'
      inputs:
        action: deploy
        namespace: $(k8sNamespace)
        kubernetesServiceConnection: 'ganasafi-prod'
        manifests: |
          $(System.ArtifactsDirectory)/manifests/deployment.yml
        imagePullSecrets: |
          $(imagePullSecret)
        containers: |
          $(containerRegistry)/$(imageRepository):$(tag)
          
    - task: KubernetesManifest@0
      condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
      displayName: 'Deploy to Kubernetes cluster'
      inputs:
        action: deploy
        namespace: $(k8sNamespace)-dev
        kubernetesServiceConnection: 'ganasafi-prod'
        manifests: |
          $(System.ArtifactsDirectory)/manifests/deployment.yml
        imagePullSecrets: |
          $(imagePullSecret)
        containers: |
          $(containerRegistry)/$(imageRepository):$(tag)
